/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchLayoutImport } from './routes/_searchLayout'
import { Route as SearchLayoutIndexImport } from './routes/_searchLayout/index'
import { Route as BookNewImport } from './routes/book/new'
import { Route as BookIdImport } from './routes/book/$id'
import { Route as AuthorNewImport } from './routes/author/new'
import { Route as AuthorIdImport } from './routes/author/$id'
import { Route as SearchLayoutBookImport } from './routes/_searchLayout/book'
import { Route as SearchLayoutAuthorImport } from './routes/_searchLayout/author'
import { Route as BookIdEditImport } from './routes/book_/$id.edit'
import { Route as AuthorIdEditImport } from './routes/author_/$id.edit'

// Create/Update Routes

const SearchLayoutRoute = SearchLayoutImport.update({
  id: '/_searchLayout',
  getParentRoute: () => rootRoute,
} as any)

const SearchLayoutIndexRoute = SearchLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SearchLayoutRoute,
} as any)

const BookNewRoute = BookNewImport.update({
  id: '/book/new',
  path: '/book/new',
  getParentRoute: () => rootRoute,
} as any)

const BookIdRoute = BookIdImport.update({
  id: '/book/$id',
  path: '/book/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthorNewRoute = AuthorNewImport.update({
  id: '/author/new',
  path: '/author/new',
  getParentRoute: () => rootRoute,
} as any)

const AuthorIdRoute = AuthorIdImport.update({
  id: '/author/$id',
  path: '/author/$id',
  getParentRoute: () => rootRoute,
} as any)

const SearchLayoutBookRoute = SearchLayoutBookImport.update({
  id: '/book',
  path: '/book',
  getParentRoute: () => SearchLayoutRoute,
} as any)

const SearchLayoutAuthorRoute = SearchLayoutAuthorImport.update({
  id: '/author',
  path: '/author',
  getParentRoute: () => SearchLayoutRoute,
} as any)

const BookIdEditRoute = BookIdEditImport.update({
  id: '/book_/$id/edit',
  path: '/book/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

const AuthorIdEditRoute = AuthorIdEditImport.update({
  id: '/author_/$id/edit',
  path: '/author/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_searchLayout': {
      id: '/_searchLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SearchLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_searchLayout/author': {
      id: '/_searchLayout/author'
      path: '/author'
      fullPath: '/author'
      preLoaderRoute: typeof SearchLayoutAuthorImport
      parentRoute: typeof SearchLayoutImport
    }
    '/_searchLayout/book': {
      id: '/_searchLayout/book'
      path: '/book'
      fullPath: '/book'
      preLoaderRoute: typeof SearchLayoutBookImport
      parentRoute: typeof SearchLayoutImport
    }
    '/author/$id': {
      id: '/author/$id'
      path: '/author/$id'
      fullPath: '/author/$id'
      preLoaderRoute: typeof AuthorIdImport
      parentRoute: typeof rootRoute
    }
    '/author/new': {
      id: '/author/new'
      path: '/author/new'
      fullPath: '/author/new'
      preLoaderRoute: typeof AuthorNewImport
      parentRoute: typeof rootRoute
    }
    '/book/$id': {
      id: '/book/$id'
      path: '/book/$id'
      fullPath: '/book/$id'
      preLoaderRoute: typeof BookIdImport
      parentRoute: typeof rootRoute
    }
    '/book/new': {
      id: '/book/new'
      path: '/book/new'
      fullPath: '/book/new'
      preLoaderRoute: typeof BookNewImport
      parentRoute: typeof rootRoute
    }
    '/_searchLayout/': {
      id: '/_searchLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof SearchLayoutIndexImport
      parentRoute: typeof SearchLayoutImport
    }
    '/author_/$id/edit': {
      id: '/author_/$id/edit'
      path: '/author/$id/edit'
      fullPath: '/author/$id/edit'
      preLoaderRoute: typeof AuthorIdEditImport
      parentRoute: typeof rootRoute
    }
    '/book_/$id/edit': {
      id: '/book_/$id/edit'
      path: '/book/$id/edit'
      fullPath: '/book/$id/edit'
      preLoaderRoute: typeof BookIdEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface SearchLayoutRouteChildren {
  SearchLayoutAuthorRoute: typeof SearchLayoutAuthorRoute
  SearchLayoutBookRoute: typeof SearchLayoutBookRoute
  SearchLayoutIndexRoute: typeof SearchLayoutIndexRoute
}

const SearchLayoutRouteChildren: SearchLayoutRouteChildren = {
  SearchLayoutAuthorRoute: SearchLayoutAuthorRoute,
  SearchLayoutBookRoute: SearchLayoutBookRoute,
  SearchLayoutIndexRoute: SearchLayoutIndexRoute,
}

const SearchLayoutRouteWithChildren = SearchLayoutRoute._addFileChildren(
  SearchLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof SearchLayoutRouteWithChildren
  '/author': typeof SearchLayoutAuthorRoute
  '/book': typeof SearchLayoutBookRoute
  '/author/$id': typeof AuthorIdRoute
  '/author/new': typeof AuthorNewRoute
  '/book/$id': typeof BookIdRoute
  '/book/new': typeof BookNewRoute
  '/': typeof SearchLayoutIndexRoute
  '/author/$id/edit': typeof AuthorIdEditRoute
  '/book/$id/edit': typeof BookIdEditRoute
}

export interface FileRoutesByTo {
  '/author': typeof SearchLayoutAuthorRoute
  '/book': typeof SearchLayoutBookRoute
  '/author/$id': typeof AuthorIdRoute
  '/author/new': typeof AuthorNewRoute
  '/book/$id': typeof BookIdRoute
  '/book/new': typeof BookNewRoute
  '/': typeof SearchLayoutIndexRoute
  '/author/$id/edit': typeof AuthorIdEditRoute
  '/book/$id/edit': typeof BookIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_searchLayout': typeof SearchLayoutRouteWithChildren
  '/_searchLayout/author': typeof SearchLayoutAuthorRoute
  '/_searchLayout/book': typeof SearchLayoutBookRoute
  '/author/$id': typeof AuthorIdRoute
  '/author/new': typeof AuthorNewRoute
  '/book/$id': typeof BookIdRoute
  '/book/new': typeof BookNewRoute
  '/_searchLayout/': typeof SearchLayoutIndexRoute
  '/author_/$id/edit': typeof AuthorIdEditRoute
  '/book_/$id/edit': typeof BookIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/author'
    | '/book'
    | '/author/$id'
    | '/author/new'
    | '/book/$id'
    | '/book/new'
    | '/'
    | '/author/$id/edit'
    | '/book/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/author'
    | '/book'
    | '/author/$id'
    | '/author/new'
    | '/book/$id'
    | '/book/new'
    | '/'
    | '/author/$id/edit'
    | '/book/$id/edit'
  id:
    | '__root__'
    | '/_searchLayout'
    | '/_searchLayout/author'
    | '/_searchLayout/book'
    | '/author/$id'
    | '/author/new'
    | '/book/$id'
    | '/book/new'
    | '/_searchLayout/'
    | '/author_/$id/edit'
    | '/book_/$id/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  SearchLayoutRoute: typeof SearchLayoutRouteWithChildren
  AuthorIdRoute: typeof AuthorIdRoute
  AuthorNewRoute: typeof AuthorNewRoute
  BookIdRoute: typeof BookIdRoute
  BookNewRoute: typeof BookNewRoute
  AuthorIdEditRoute: typeof AuthorIdEditRoute
  BookIdEditRoute: typeof BookIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  SearchLayoutRoute: SearchLayoutRouteWithChildren,
  AuthorIdRoute: AuthorIdRoute,
  AuthorNewRoute: AuthorNewRoute,
  BookIdRoute: BookIdRoute,
  BookNewRoute: BookNewRoute,
  AuthorIdEditRoute: AuthorIdEditRoute,
  BookIdEditRoute: BookIdEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_searchLayout",
        "/author/$id",
        "/author/new",
        "/book/$id",
        "/book/new",
        "/author_/$id/edit",
        "/book_/$id/edit"
      ]
    },
    "/_searchLayout": {
      "filePath": "_searchLayout.tsx",
      "children": [
        "/_searchLayout/author",
        "/_searchLayout/book",
        "/_searchLayout/"
      ]
    },
    "/_searchLayout/author": {
      "filePath": "_searchLayout/author.tsx",
      "parent": "/_searchLayout"
    },
    "/_searchLayout/book": {
      "filePath": "_searchLayout/book.tsx",
      "parent": "/_searchLayout"
    },
    "/author/$id": {
      "filePath": "author/$id.tsx"
    },
    "/author/new": {
      "filePath": "author/new.tsx"
    },
    "/book/$id": {
      "filePath": "book/$id.tsx"
    },
    "/book/new": {
      "filePath": "book/new.tsx"
    },
    "/_searchLayout/": {
      "filePath": "_searchLayout/index.tsx",
      "parent": "/_searchLayout"
    },
    "/author_/$id/edit": {
      "filePath": "author_/$id.edit.tsx"
    },
    "/book_/$id/edit": {
      "filePath": "book_/$id.edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
